#!/usr/bin/env python
# Emacs: treat this as -*- python -*-

import os
import sys
import optparse
import subprocess


parser = optparse.OptionParser()
add = parser.add_option

qsub_options = [('l', 'resource-list'),
                ('q', 'queue')]

for short, long in qsub_options:
    add('-' + short, '--' + long)
    
add('-x', '--export', help='Environment variables to export.')
add('-g', '--gpaw', help='Path to GPAW.')
add('--module', help='Run library module as a script (terminates option list)')
add('-n', '--threads', type=int, default=1)

args = sys.argv[1:]
for i, arg in enumerate(args):
    if arg.startswith('--module='):
        module_args = args[i + 1:]
        args = args[:i + 1]
        break
    if arg == '--module':
        module_args = args[i + 2:]
        args = args[:i + 2]
        break
else:
    module_args = []
    
opts, args = parser.parse_args(args)
args += module_args

script = args[0]
name = script.split('/')[-1]

if opts.gpaw:
    path = opts.gpaw
else:
    path = os.environ.get('GPAW_HOME')
    if not path:
        import gpaw
        path = gpaw.__path__[0]
        
if opts.export:
    export = opts.export.split(',')
else:
    export = []
        
qsub = '#!/usr/bin/env python\n'
qsub += '#PBS -N %s\n' % name  # set default job name
qsub += '#PBS -W umask=002\n'

if not opts.module:
    for line in open(os.path.expanduser(script)):
        if line.startswith('#PBS'):
            qsub += line

qsub += 'job = %r\n' % args
qsub += 'path = %r\n' % path
qsub += 'module = %r\n' % opts.module
qsub += 'nthreads = %d\n' % opts.threads
qsub += 'export = %r\n' % export

qsub += """
import os
import subprocess

nodename = os.uname()[1]
c = nodename[0]
assert c in 'abcdghinmqp'

nproc = len(open(os.environ['PBS_NODEFILE']).readlines())

cmd = ['mpiexec']

export.append('PYTHONPATH=%s:%s' % (path, os.environ.get('PYTHONPATH', '')))

if c in 'ghi':
    # Intel Niflheim node:
    cmd += ['--mca', 'btl', '^tcp']

if nthreads > 1:
    cmd += ['-np', str(nproc // nthreads), '--loadbalance']
    export.append('OMP_NUM_THREADS=%d' % nthreads)

for x in export:
    cmd += ['-x', x]
    
cmd.append(os.path.join(path,
                        'build',
                        'bin.' + os.environ['GPAW_PLATFORM'],
                        'gpaw-python'))
if module:
    cmd += ['-m', module]
cmd += job

error = subprocess.call(cmd)
if error:
    raise SystemExit(error)
"""

cmd = ['qsub']
for short, long in qsub_options:
    cmd += ['-' + short, getattr(opts, long.replace('-', '_'))]

subprocess.Popen(cmd, stdin=subprocess.PIPE).communicate(qsub)
