import pytest

from gpaw import GPAW, PW
from gpaw.directmin.fdpw.directmin import DirectMin
from gpaw.mom import prepare_mom_calculation
from gpaw.directmin.tools import excite_and_sort
from ase import Atoms
import numpy as np


def test_mom_directopt_pw(in_tmp_dir):
    # Water molecule:
    d = 0.9575
    t = np.pi / 180 * 104.51
    atoms = Atoms('OH2',
                  positions=[(0, 0, 0),
                             (d, 0, 0),
                             (d * np.cos(t), d * np.sin(t), 0)])
    atoms.center(vacuum=4.0)

    calc = GPAW(mode=PW(200),
                spinpol=True,
                symmetry='off',
                eigensolver=DirectMin(
                                      searchdir_algo={'name': 'l-bfgs',
                                                      'memory': 1},
                                      convergelumo=True),
                mixer={'name': 'dummy'},
                occupations={'name': 'fixed-uniform'},
                convergence={'eigenstates': 1e-4}
                )
    atoms.calc = calc
    atoms.get_potential_energy()

    calc.set(eigensolver=DirectMin(exstopt=True,
                                   searchdir_algo={'name': 'l-bfgs',
                                                   'memory': 1}
                                                   ))
    excite_and_sort(calc.wfs, 0, 1, (0, 0), 'fdpw')
    f_sn = []
    for spin in range(calc.get_number_of_spins()):
        f_n = calc.get_occupation_numbers(spin=spin)
        f_sn.append(f_n)
    prepare_mom_calculation(calc, atoms, f_sn)

    e = atoms.get_potential_energy()
    assert e == pytest.approx(18.168957, abs=1.0e-3)

    f = atoms.get_forces()

    # Numeric forces, generated by disabled code below
    f2 = np.array([[-3.694407, -5.290016, 0.000186],
                   [4.963556, 0.157132, 0.000165],
                   [-1.07222, 5.031139, 0.00036]])

    assert f2 == pytest.approx(f, abs=5e-2)

    numeric = False
    if numeric:
        from ase.calculators.test import numeric_force
        f_num = np.array([[numeric_force(atoms, a, i)
                          for i in range(3)]
                         for a in range(len(atoms))])
        print('Numerical forces')
        print(f_num)
        print(f - f_num, np.abs(f - f_num).max())
