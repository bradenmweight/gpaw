from gpaw.test import equal
from ase import Atoms
from ase.units import Pascal, m
from ase.data.vdw import vdw_radii
from ase.parallel import rank
from gpaw.solvation import (
    SolvationGPAW,
    EffectivePotentialCavity,
    Power12Potential,
    LinearDielectric,
    KB51Volume,
    GradientSurface,
    VolumeInteraction,
    SurfaceInteraction,
    LeakedDensityInteraction
)
import numpy as np

SKIP_ENERGY_CALCULATION = True
F_max_err = 0.01

h = 0.2
u0 = 0.180
epsinf = 80.
T = 298.15
atomic_radii = lambda atoms: [vdw_radii[n] for n in atoms.numbers]

atoms = Atoms('NaCl', positions=((5.6, 5.6, 6.8), (5.6, 5.6, 8.8)))
atoms.set_cell((11.2, 11.2, 14.4))


atoms.calc = SolvationGPAW(
    xc='PBE', h=h, setups={'Na': '1'},
    cavity=EffectivePotentialCavity(
        effective_potential=Power12Potential(atomic_radii, u0),
        temperature=T,
        volume_calculator=KB51Volume(),
        surface_calculator=GradientSurface()
        ),
    dielectric=LinearDielectric(epsinf=epsinf),
    # parameters chosen to give ~ 1eV for each interaction
    interactions=[
        VolumeInteraction(pressure=-1e9 * Pascal),
        SurfaceInteraction(surface_tension=100. * 1e-3 * Pascal * m),
        LeakedDensityInteraction(voltage=10.)
        ]
    )


def vac(atoms):
    return min(
        atoms.positions[0][2],
        14.4 - atoms.positions[1][2]
        )

step = .05
if not SKIP_ENERGY_CALCULATION:
    d = []
    E = []
    F = []
    while vac(atoms) >= 5.6:
        d.append(abs(atoms.positions[0][2] - atoms.positions[1][2]))
        E.append(atoms.calc.get_potential_energy(atoms, force_consistent=True))
        F.append(atoms.calc.get_forces(atoms))
        atoms.positions[0][2] -= step

    d = np.array(d)
    E = np.array(E)
    F = np.array(F)

    if rank == 0:
        np.save('d.npy', d)
        np.save('E.npy', E)
        np.save('F.npy', F)
        from pprint import pprint
        print 'd'
        pprint(list(d))
        print ''
        print 'E'
        pprint(list(E))
        print ''
        print 'F'
        pprint([list([list(l2) for l2 in l1]) for l1 in F])
else:
    d = [
        2.0000000000000009,
        2.0500000000000007,
        2.1000000000000005,
        2.1500000000000004,
        2.2000000000000002,
        2.25,
        2.2999999999999998,
        2.3499999999999996,
        2.3999999999999995,
        2.4499999999999993,
        2.4999999999999991,
        2.5499999999999989,
        2.5999999999999988,
        2.6499999999999986,
        2.6999999999999984,
        2.7499999999999982,
        2.799999999999998,
        2.8499999999999979,
        2.8999999999999977,
        2.9499999999999975,
        2.9999999999999973,
        3.0499999999999972,
        3.099999999999997,
        3.1499999999999968,
        3.1999999999999966
        ]
    E = [
        -3.5621660857603752,
        -3.8470944929585107,
        -4.0697260677386637,
        -4.2407995975832176,
        -4.3694090737279527,
        -4.462917580562376,
        -4.5275657886015059,
        -4.5687343868325652,
        -4.5906274139169883,
        -4.5971063809494304,
        -4.5908849287743703,
        -4.5748263214005753,
        -4.5504884748284926,
        -4.5201085114769821,
        -4.485122296658389,
        -4.4463862588633054,
        -4.4049258458861305,
        -4.3617174735361877,
        -4.3173691936373197,
        -4.2723495649027683,
        -4.2271037511496585,
        -4.1821132207087164,
        -4.1375774786436823,
        -4.0937475670222288,
        -4.0506713706313953
         ]
    F = [
        [[2.3809180026918048e-12, 2.2946714536063641e-12, -6.4015381453831708],
         [8.31653104679627e-11, 1.0361004186174626e-10, 6.4074086798185244]],
        [[2.4356594855003372e-12, 2.594672597762284e-12, -5.0357907930436561],
         [8.2924023985310971e-11, 1.0111748710718118e-10, 5.0365006824080814]],
        [[2.45842455330319e-12, 2.1877950006520994e-12, -3.9023259132089354],
         [8.418704720111081e-11, 1.0269560757261459e-10, 3.9052307950466987]],
        [[2.3245281151199202e-12, 2.1627958345046332e-12, -2.965264314584878],
         [8.3964024264573392e-11, 1.0267732855320421e-10, 2.9674814011158408]],
        [[2.3733455975534119e-12, 2.2385404088310098e-12, -2.1939765854494722],
         [8.3732738018005287e-11, 1.024775689547422e-10, 2.192679730416994]],
        [[2.3545189840008242e-12, 2.2853051290908101e-12, -1.5604151631727339],
         [8.1063503418027098e-11, 1.062767412620075e-10, 1.5583632856328093]],
        [[2.2789464481139531e-12, 2.438366482215817e-12, -1.0395221395220284],
         [8.1830969054061837e-11, 1.0625228096767977e-10, 1.0425598315384412]],
        [[2.2750421065348342e-12, 2.1967822120324995e-12, -0.61395945156153031],
         [8.5325203935211636e-11, 1.0313192239652272e-10, 0.61768533993754382]],
        [[2.4913766387125223e-12, 2.2934672118829357e-12, -0.26935133444627857],
         [8.1140396737837209e-11, 1.0601233686869123e-10, 0.27276580714990428]],
        [[2.3268751097006317e-12, 2.3551846002086376e-12, 0.0091238344219527305],
         [8.3958851610410245e-11, 1.0798014928669398e-10, -0.010215600112869072]],
        [[2.4408895134520827e-12, 2.1525151783101804e-12, 0.23408312054926328],
         [8.4581438228202119e-11, 1.0354281766348519e-10, -0.23249784364638854]],
        [[2.356584298710852e-12, 2.2263084350291501e-12, 0.41351631797005639],
         [8.4330717485598306e-11, 1.0799643732241314e-10, -0.4107933542605961]],
        [[2.4879431324367206e-12, 2.3124117182542759e-12, 0.55344692560077136],
         [8.0994703499231395e-11, 1.0137171236835273e-10, -0.55060784025401566]],
        [[2.3958740339780397e-12, 2.4764785026850585e-12, 0.66186336597811035],
         [8.3550193699390216e-11, 9.909434167014802e-11, -0.66233425621853625]],
        [[2.426603953793723e-12, 2.3184329268714173e-12, 0.74599532832801052],
         [8.2967535260673618e-11, 1.0238180004787436e-10, -0.74226593992681889]],
        [[2.4844317777087426e-12, 2.2073081767261696e-12, 0.80851637311543412],
         [8.0599121400148584e-11, 1.0206388783889011e-10, -0.80437501155028324]],
        [[2.4257303975523926e-12, 2.5395227869837974e-12, 0.85181544104813178],
         [8.698487841199919e-11, 1.0326915248503997e-10, -0.85223533720134215]],
        [[2.390091127400335e-12, 2.3201500863659358e-12, 0.88034903004995801],
         [8.4201620346529374e-11, 1.0899270873137158e-10, -0.88093449492578035]],
        [[2.4439767699558034e-12, 2.0150978172034137e-12, 0.89871620271680475],
         [8.2796143574465075e-11, 1.0774074406224743e-10, -0.8912851986184479]],
        [[2.4838569023801695e-12, 2.1056166534144434e-12, 0.90716217990605097],
         [8.5049926304709597e-11, 1.0499611624529689e-10, -0.89832004960504075]],
        [[2.3886767535252047e-12, 2.0661888873584934e-12, 0.90627532526089438],
         [8.5948435892339729e-11, 1.0119164672323648e-10, -0.9072292531535171]],
        [[2.446663719136288e-12, 2.3520624920367866e-12, 0.89899868226782753],
         [8.0796087743292845e-11, 9.9942548443853979e-11, -0.90073650986921683]],
        [[2.4290489413293218e-12, 2.1383318869009133e-12, 0.88827377336247892],
         [8.2844432872834075e-11, 1.0436618529650997e-10, -0.89076257647414836]],
        [[2.4435002972533343e-12, 2.383261272982643e-12, 0.87344838835097893],
         [8.5194648883186491e-11, 1.0153557954017905e-10, -0.87204406746843077]],
        [[2.3649940867865227e-12, 2.2508392849508383e-12, 0.85373166351925633],
         [8.3628292180472478e-11, 1.0341262771274784e-10, -0.84749357850883544]]
        ]
    d = np.array(d)
    E = np.array(E)
    F = np.array(F)


# test for orthogonal forces equal zero:
equal(F[..., :2], .0, 1e-7)

stencil = 2  # 1 is too rough, 3 does not change compared to 2
FNa, FCl = F[..., 2].T
FNa *= -1.
# test symmetry
equal(FNa, FCl, F_max_err)
dd = np.diff(d)[0]
kernel = {
    1: np.array((0.5, 0, -0.5)),
    2: np.array((-1. / 12., 2. / 3., 0, -2. / 3., 1. / 12.)),
    3: np.array((1. / 60., -0.15, 0.75, 0, -0.75, 0.15, -1. / 60.)),
    }

dEdz = np.convolve(E, kernel[stencil] / step, 'valid')

err = np.maximum(
    np.abs(-dEdz - FNa[stencil:-stencil]),
    np.abs(-dEdz - FCl[stencil:-stencil])
    )

# test forces against -dE / dd finite difference
equal(err, .0, F_max_err)

if SKIP_ENERGY_CALCULATION:
    # check only selected points:
    def check(index):
        atoms.positions[0][2] = 6.8 - index * step
        F_check = atoms.get_forces()
        equal(F_check[..., :2], .0, 1e-7)
        FNa_check, FCl_check = F_check[..., 2].T
        FNa_check *= -1.
        equal(FNa_check, FCl_check, F_max_err)
        err = np.maximum(
            np.abs(-dEdz[index - stencil] - FNa_check),
            np.abs(-dEdz[index - stencil] - FCl_check)
            )
        equal(err, .0, F_max_err)
    l = len(FNa)
    #check(stencil)
    check(l // 2)
    #check(l - 1 - stencil)
