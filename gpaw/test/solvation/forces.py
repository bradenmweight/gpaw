from gpaw.test import equal
from ase import Atoms
from ase.units import Pascal, m
from ase.data.vdw import vdw_radii
from ase.parallel import rank
from gpaw.solvation import (
    SolvationGPAW,
    EffectivePotentialCavity,
    Power12Potential,
    LinearDielectric,
    KB51Volume,
    GradientSurface,
    VolumeInteraction,
    SurfaceInteraction,
    LeakedDensityInteraction
)
import numpy as np

SKIP_ENERGY_CALCULATION = True
F_max_err = 0.01

h = 0.2
u0 = 0.180
epsinf = 80.
T = 298.15
atomic_radii = lambda atoms: [vdw_radii[n] for n in atoms.numbers]

atoms = Atoms('NaCl', positions=((5.6, 5.6, 6.8), (5.6, 5.6, 8.8)))
atoms.set_cell((11.2, 11.2, 14.4))


atoms.calc = SolvationGPAW(
    xc='PBE', h=h, setups={'Na': '1'},
    cavity=EffectivePotentialCavity(
        effective_potential=Power12Potential(atomic_radii, u0),
        temperature=T,
        volume_calculator=KB51Volume(),
        surface_calculator=GradientSurface()
        ),
    dielectric=LinearDielectric(epsinf=epsinf),
    # parameters chosen to give ~ 1eV for each interaction
    interactions=[
        VolumeInteraction(pressure=-1e9 * Pascal),
        SurfaceInteraction(surface_tension=100. * 1e-3 * Pascal * m),
        LeakedDensityInteraction(voltage=10.)
        ]
    )


def vac(atoms):
    return min(
        atoms.positions[0][2],
        14.4 - atoms.positions[1][2]
        )

step = .05
if not SKIP_ENERGY_CALCULATION:
    d = []
    E = []
    F = []
    while vac(atoms) >= 5.6:
        d.append(abs(atoms.positions[0][2] - atoms.positions[1][2]))
        E.append(atoms.calc.get_potential_energy(atoms, force_consistent=True))
        F.append(atoms.calc.get_forces(atoms))
        atoms.positions[0][2] -= step

    d = np.array(d)
    E = np.array(E)
    F = np.array(F)

    if rank == 0:
        np.save('d.npy', d)
        np.save('E.npy', E)
        np.save('F.npy', F)
        from pprint import pprint
        print 'd'
        pprint(list(d))
        print ''
        print 'E'
        pprint(list(E))
        print ''
        print 'F'
        pprint([list([list(l2) for l2 in l1]) for l1 in F])
else:
    d = [
        2.0000000000000009,
        2.0500000000000007,
        2.1000000000000005,
        2.1500000000000004,
        2.2000000000000002,
        2.25,
        2.2999999999999998,
        2.3499999999999996,
        2.3999999999999995,
        2.4499999999999993,
        2.4999999999999991,
        2.5499999999999989,
        2.5999999999999988,
        2.6499999999999986,
        2.6999999999999984,
        2.7499999999999982,
        2.799999999999998,
        2.8499999999999979,
        2.8999999999999977,
        2.9499999999999975,
        2.9999999999999973,
        3.0499999999999972,
        3.099999999999997,
        3.1499999999999968,
        3.1999999999999966
        ]

    E = [
        -3.5623535762732539,
        -3.8472870257873839,
        -4.0699218430404951,
        -4.2409991091652506,
        -4.369610500545182,
        -4.4631222109461826,
        -4.5277730391457185,
        -4.5689457322399871,
        -4.5908417291081172,
        -4.5973246985139786,
        -4.5911057085513818,
        -4.5750504238006826,
        -4.5507147450747363,
        -4.52033824659408,
        -4.4853542633906969,
        -4.4466214557451575,
        -4.4051628197921833,
        -4.361957420357589,
        -4.3176108652499794,
        -4.2725941402293461,
        -4.2273498258808218,
        -4.1823620207450611,
        -4.1378276291533904,
        -4.0940003380552978,
        -4.0509254045156871
         ]

    F = [
        [[2.3803962368842881e-12, 2.2941027839036341e-12, -6.4016619364747367],
         [8.3165368250455733e-11, 1.0360955254054467e-10, 6.4076700779712104]],
        [[2.4351643865866743e-12, 2.5942711838544744e-12, -5.0358531307256866],
         [8.2923793054600391e-11, 1.0111732199652894e-10, 5.0367570549068992]],
        [[2.4575494510642222e-12, 2.1873712859716337e-12, -3.902428659675004],
         [8.4186728936988161e-11, 1.0269481075555409e-10, 3.9054715252226946]],
        [[2.3238510497755766e-12, 2.162171412870263e-12, -2.965299541175638],
         [8.3963607762085965e-11, 1.0267696004600293e-10, 2.9677107556056539]],
        [[2.3719120702000552e-12, 2.2371131593810207e-12, -2.1940587230412385],
         [8.373222313326941e-11, 1.0247699489496013e-10, 2.1928996477378191]],
        [[2.3540463505874961e-12, 2.2847699105470643e-12, -1.5604538951228946],
         [8.1062860841410096e-11, 1.0627636124508127e-10, 1.5585955205646334]],
        [[2.2784793078908529e-12, 2.437429849764262e-12, -1.0396230970143663],
         [8.1830692275276107e-11, 1.0625180704359368e-10, 1.0427961266267287]],
        [[2.2744937721626288e-12, 2.1970944228496846e-12, -0.61400877021024047],
         [8.5324816121990953e-11, 1.0313102361440602e-10, 0.61792683476055743]],
        [[2.4901062382824951e-12, 2.2926197825220047e-12, -0.269454452537079],
         [8.1139732586599969e-11, 1.0601186204081405e-10, 0.27300891525708076]],
        [[2.3261610500864324e-12, 2.3542033662117704e-12, 0.0090800770838482276],
         [8.3958235828014419e-11, 1.0797957089307035e-10, -0.009979438300224127]],
        [[2.4394913332226617e-12, 2.1515339443133127e-12, 0.23399500556574687],
         [8.4581087193476338e-11, 1.0354219954661028e-10, -0.23227017336925845]],
        [[2.3560736822844891e-12, 2.2249926894424411e-12, 0.4134848614701509],
         [8.4330103654502132e-11, 1.0799580182661579e-10, -0.41057431205828498]],
        [[2.4870470320221809e-12, 2.3111405742128792e-12, 0.55335880964242956],
         [8.099421729293656e-11, 1.0137130251543184e-10, -0.55038983167082789]],
        [[2.3948501849748625e-12, 2.4753634640522545e-12, 0.66183044382631195],
         [8.3550099077650311e-11, 9.9093665198858723e-11, -0.66212430980915826]],
        [[2.4256160199052812e-12, 2.3176970013737669e-12, 0.74591031031817456],
         [8.2967201148702665e-11, 1.0238149026531512e-10, -0.74205330167399264]],
        [[2.4838956157522406e-12, 2.2064384465925825e-12, 0.80849048101271992],
         [8.0598800388194249e-11, 1.0206348492229351e-10, -0.80416738552787081]],
        [[2.4252879421803124e-12, 2.5384523498963057e-12, 0.85173883925030514],
         [8.6984630956445772e-11, 1.0326801920724984e-10, -0.8520336419896809]],
        [[2.3884663308623911e-12, 2.3197263716854701e-12, 0.88032711661941032],
         [8.4201408509309026e-11, 1.0899265366545003e-10, -0.88073190090895837]],
        [[2.4431910060671044e-12, 2.013536763117488e-12, 0.89864100521551948],
         [8.2795560485037344e-11, 1.0774103199048501e-10, -0.89108614762063498]],
        [[2.4831717858388295e-12, 2.1055943526417873e-12, 0.90714453762170744],
         [8.5049579582749028e-11, 1.0499557943695197e-10, -0.89812253828913802]],
        [[2.387079096379089e-12, 2.0646501340452238e-12, 0.90620552594361381],
         [8.5947627614954429e-11, 1.011907897550685e-10, -0.9070359860613727]],
        [[2.4460842921403092e-12, 2.352999124488342e-12, 0.89898564657845081],
         [8.0795837417311536e-11, 9.9942712650715143e-11, -0.90054816584592035]],
        [[2.4282064926350235e-12, 2.1382426838102889e-12, 0.88820798059635553],
         [8.2843985891280791e-11, 1.0436611904753494e-10, -0.89057728660609303]],
        [[2.4424646188843604e-12, 2.3826145505756166e-12, 0.87343832100693974],
         [8.5194485791341917e-11, 1.0153532920093912e-10, -0.87185902717197827]],
        [[2.3643990704863878e-12, 2.2503486679524043e-12, 0.8536697771659536],
         [8.3627962434236566e-11, 1.0341160233454573e-10, -0.8473084262698739]]
        ]
    d = np.array(d)
    E = np.array(E)
    F = np.array(F)


# test for orthogonal forces equal zero:
equal(F[..., :2], .0, 1e-7)

stencil = 2  # 1 is too rough, 3 does not change compared to 2
FNa, FCl = F[..., 2].T
FNa *= -1.
# test symmetry
equal(FNa, FCl, F_max_err)
dd = np.diff(d)[0]
kernel = {
    1: np.array((0.5, 0, -0.5)),
    2: np.array((-1. / 12., 2. / 3., 0, -2. / 3., 1. / 12.)),
    3: np.array((1. / 60., -0.15, 0.75, 0, -0.75, 0.15, -1. / 60.)),
    }

dEdz = np.convolve(E, kernel[stencil] / step, 'valid')

err = np.maximum(
    np.abs(-dEdz - FNa[stencil:-stencil]),
    np.abs(-dEdz - FCl[stencil:-stencil])
    )

# test forces against -dE / dd finite difference
equal(err, .0, F_max_err)

if SKIP_ENERGY_CALCULATION:
    # check only selected points:
    def check(index):
        atoms.positions[0][2] = 6.8 - index * step
        F_check = atoms.get_forces()
        equal(F_check[..., :2], .0, 1e-7)
        FNa_check, FCl_check = F_check[..., 2].T
        FNa_check *= -1.
        equal(FNa_check, FCl_check, F_max_err)
        err = np.maximum(
            np.abs(-dEdz[index - stencil] - FNa_check),
            np.abs(-dEdz[index - stencil] - FCl_check)
            )
        equal(err, .0, F_max_err)
    l = len(FNa)
    #check(stencil)
    check(l // 2)
    #check(l - 1 - stencil)
