import pytest

from gpaw import GPAW, FD
from ase import Atoms
import numpy as np
from gpaw.directmin.fdpw.directmin import DirectMin
from ase.dft.bandgap import bandgap
from ase.units import Ha


def test_fdsic_h2o(in_tmp_dir):
    """
    test Perdew-Zunger Self-Interaction
    Correction in PW mode using DirectMin
    :param in_tmp_dir:
    :return:
    """

    # Water molecule:
    d = 0.9575
    t = np.pi / 180 * (104.51 + 2.0)
    eps = 0.02
    H2O = Atoms('OH2',
                positions=[(0, 0, 0),
                           (d + eps, 0, 0),
                           (d * np.cos(t), d * np.sin(t), 0)])
    H2O.center(vacuum=4.0)

    calc = GPAW(mode=FD(force_complex_dtype=True),
                h=0.25,
                occupations={'name': 'fixed-uniform'},
                eigensolver=DirectMin(
                    odd_parameters={'name': 'PZ-SIC',
                                    'scaling_factor': (0.5, 0.5)  # SIC/2
                                    },
                    localizationtype='FB-ER',
                    g_tol=5.0e-3,
                    maxiter=200),
                convergence={'eigenstates': 1e-4},
                mixer={'method': 'dummy'},
                symmetry='off',
                spinpol=True
                )
    H2O.calc = calc
    e = H2O.get_potential_energy()
    f = H2O.get_forces()
    efermi = calc.wfs.fermi_levels[0] * Ha
    gap = bandgap(calc, efermi=efermi)[0]

    assert e == pytest.approx(-18.14454, abs=1e-3)
    # Numeric forces, generated by disabled code below
    f2 = np.array([[2.12567719, 0.50377328, -0.00346431],
                   [-2.15706957, 0.35677144, -0.00191784],
                   [0.66389751, -0.8885787, 0.00047263]])

    assert f2 == pytest.approx(f, abs=3e-2)
    assert gap == pytest.approx(10.217, abs=1e-2)

    numeric = False
    if numeric:
        from ase.calculators.test import numeric_force
        f_num = np.array([[numeric_force(H2O, a, i)
                          for i in range(3)]
                         for a in range(len(H2O))])
        print('Numerical forces')
        print(f_num)
        print(f - f_num, np.abs(f - f_num).max())

    calc.write('h2o.gpw', mode='all')
    from gpaw import restart
    H2O, calc = restart('h2o.gpw', txt='-')
    H2O.positions += 1.0e-6
    f3 = H2O.get_forces()
    niter = calc.get_number_of_iterations()
    assert niter == pytest.approx(4, abs=3)
    assert f2 == pytest.approx(f3, abs=3e-2)
