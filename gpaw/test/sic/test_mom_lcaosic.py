import pytest

from gpaw import GPAW, LCAO, restart
from ase import Atoms
import numpy as np
from gpaw.directmin.etdm import ETDM
from gpaw.directmin.tools import excite
from gpaw.mom import prepare_mom_calculation


@pytest.mark.sic
def test_mom_lcaosic(in_tmp_dir):
    # Water molecule:
    d = 0.9575
    t = np.pi / 180 * 104.51
    H2O = Atoms('OH2',
                positions=[(0, 0, 0),
                           (d, 0, 0),
                           (d * np.cos(t), d * np.sin(t), 0)])
    H2O.center(vacuum=3.0)

    calc = GPAW(mode=LCAO(force_complex_dtype=True),
                h=0.24,
                basis='sz(dzp)',
                spinpol=True,
                symmetry='off',
                eigensolver='etdm',
                mixer={'backend': 'no-mixing'},
                occupations={'name': 'fixed-uniform'},
                convergence={'eigenstates': 1e-4}
                )
    H2O.calc = calc
    H2O.get_potential_energy()

    calc.set(eigensolver=ETDM(searchdir_algo={'name': 'l-sr1p'},
                              linesearch_algo={'name': 'max-step'},
                              need_init_orbs=False))
    f_sn = excite(calc, 0, 0, (0, 0))
    prepare_mom_calculation(calc, H2O, f_sn)
    H2O.get_potential_energy()

    test_restart = False
    if test_restart:
        calc.write('h2o.gpw', mode='all')
        H2O, calc = restart('h2o.gpw', txt='-')

    calc.set(eigensolver=ETDM(searchdir_algo={'name': 'l-sr1p'},
                              linesearch_algo={'name': 'max-step'},
                              need_init_orbs=False,
                              localizationtype='PM_PZ',
                              localizationseed=42,
                              functional_settings={
                                  'name': 'PZ-SIC',
                                  'scaling_factor':
                                      (0.5, 0.5)}),  # SIC/2
             convergence={'eigenstates': 1e-2})

    e = H2O.get_potential_energy()
    assert e == pytest.approx(-2.007092, abs=5.0e-3)

    f = H2O.get_forces()

    # Numeric forces, generated by disabled code below
    f_num = np.array([[-8.03296284e+00, -1.50560561e+01, -2.68881709e-03],
                      [1.43032137e+01, -9.85884446e-01, -2.20362758e-03],
                      [-4.91508686e+00, 1.54509473e+01, -2.72459934e-04]])

    numeric = False
    if numeric:
        from ase.calculators.test import numeric_force
        f_num = np.array([[numeric_force(H2O, a, i)
                           for i in range(3)]
                          for a in range(len(H2O))])
        print('Numerical forces')
        print(f_num)
        print(f - f_num, np.abs(f - f_num).max())

    assert f == pytest.approx(f_num, abs=0.75)
