#!/usr/bin/env python

import os
import sys
import socket
import re
from optparse import OptionParser
from math import sqrt
import Numeric as num

from ASE.Units import units

def fatalerror(msg=None):
    if msg:
        print 'gpaw-energies error:',msg
    parser.print_help()
    sys.exit()

parser = OptionParser(usage='%prog [options] [file]')
parser.add_option("-F", "--Forces", action='count', default=None,
                  help='print forces also')
parser.add_option("-G", "--Gauss", dest='gauss', default=None,
                  help=' Gauss fold by width in the chosen energy unit')
parser.add_option("-H", "--Hartree", action='count', default=None,
                  help='use Hartree energy units (def: eV)')
opt, args = parser.parse_args()
#print "opt=",opt
##print "args=",args

if opt.Hartree is not None:
    units.SetEnergyUnit('Hartree')
    units.SetLengthUnit('Bohr')

fname = 'gpaw-restart.gpw'
if len(args):
    fname = args[0]

from gpaw import Calculator
paw = Calculator(fname,txt=None)
Ha = paw.Ha
a0 = paw.a0

out = sys.stdout

print >> out, "# file=",fname
print >> out, "#",
if not paw.converged: print >> out,'not',
from math import log
print >> out, 'converged, Log10 error=',log(paw.error)/log(10.)
print >> out, "# energy unit:",units.GetEnergyUnit()
print >> out, "# total energy = ",paw.Etot*Ha,\
      "("+str((paw.Eref+paw.Etot)*Ha)+")"
print >> out, '# kin.    "    = ',paw.Ekin*Ha
print >> out, '# pot.    "    = ',paw.Epot*Ha
print >> out, '# xc      "    = ',paw.Exc*Ha

# dos
if opt.gauss is None:
    from gpaw.output import eigenvalue_string
    print >> out, eigenvalue_string(paw,"# ")
else:
    print >> out,"fold"

# forces
if opt.Forces:
    if paw.F_ac is None:
        print >> out, '# sorry, no forces'
    else:
        print >> out, '# Forces ['+units.GetEnergyUnit()+\
              '/'+units.GetLengthUnit()+']:'
        fmax = 0.
        scale = Ha/a0
        for a,f in zip(paw.get_atoms(),paw.F_ac):
            norm = sqrt(num.dot(f,f))*scale
            if norm>fmax: fmax=norm
            print >> out, a.symbol, norm, f*scale
        print >> out, '# max. force',fmax 
