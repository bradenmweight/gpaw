#!/usr/bin/env python
# -*- python -*-

import os
import sys
import socket
import re
from optparse import OptionParser
from math import log,sqrt
import numpy as npy

from gpaw.output import eigenvalue_string
from gpaw.utilities.fold import fold
from gpaw.cluster import Cluster

def fatalerror(msg=None):
    if msg:
        print 'gpaw-energies error:',msg
    parser.print_help()
    sys.exit()

parser = OptionParser(usage='%prog [options] [file]')
parser.add_option("-F", "--Forces", action='count', default=None,
                  help='print forces also')
parser.add_option("-G", "--Gauss", dest='gauss', default=None,
                  help=' Gauss fold by width in the chosen energy unit')
parser.add_option("-H", "--Hartree", action='count', default=None,
                  help='use Hartree energy units (def: eV)')
parser.add_option("-s", "--structure", dest='structure_file', default=None,
                  help=' Write the atomic structure to the given file')
opt, args = parser.parse_args()
#print "opt=",opt
##print "args=",args



fname = 'gpaw-restart.gpw'
if len(args):
    fname = args[0]

from gpaw import Calculator
paw = Calculator(fname, txt=None, idiotproof=False)
Ha = paw.Ha
a0 = paw.a0

lengthunit = 'Ang'
energyunit = 'eV'
if opt.Hartree is not None:
    Ha = 1.0
    a0 = 1.0
    lengthunit = 'Bohr'
    energyunit = 'Hartree'

# write the structure out only
if opt.structure_file:
    s = Cluster(paw.atoms)
    s.write(opt.structure_file)
    sys.exit()

out = sys.stdout

print >> out, "# file=",fname
additional_info=True
if additional_info:
    p = paw.input_parameters
    print >> out, '# xc:',paw.hamiltonian.xc.xcfunc.get_name()
    if  p['charge']:
        print >> out, '# charge:',p['charge']
    cell = paw.get_atoms().get_cell().diagonal()
    h = cell / p['gpts']
    print >> out, '# unit cell=', cell
    print >> out, '# h=', h
    print >> out, '# periodic=', pbc_c
    print >> out, "#",
    if not paw.converged:
        print >> out,'not',
    print >> out, 'converged'
    try:
        for error in ['density','energy']:
            print >> out, '# Log10 error('+error+')=%8.3f' %\
                  (log(paw.error[error])/log(10.))
        bands = paw.input_parameters['convergence']['bands']
        print >> out, '# Log10 error for', str(bands),'bands=%8.3f' %\
               (log(paw.error['eigenstates'])/log(10.))
    except:
        pass

print >> out, "# energy unit:", energyunit
print >> out, "# total energy = ",paw.Etot*Ha,\
      "("+str((paw.Eref+paw.Etot)*Ha)+")"
print >> out, '# kin.    "    = ',paw.Ekin*Ha
print >> out, '# pot.    "    = ',paw.Epot*Ha
print >> out, '# xc      "    = ',paw.Exc*Ha

# dos
if opt.gauss is None:
    print >> out, eigenvalue_string(paw, '# '),
else:
    width = float(opt.gauss)
    print >> out,"# folding with", width
    eo = npy.empty((paw.nspins*2, 2, paw.nbands))
    for s in range(paw.nspins):
        eo[2*s][0][:] = paw.kpt_u[s].eps_n*Ha
        eo[2*s][1][:] = paw.kpt_u[s].f_n
        eo[2*s+1][0][:] = paw.kpt_u[s].eps_n*Ha
        eo[2*s+1][1][:] = (3.-paw.nspins)-paw.kpt_u[s].f_n
    eo = fold(eo, width)
    if paw.nspins == 1:
        print >> out,"# eps    occ   unocc"
        for e,o,u in zip(eo[0],eo[1],eo[2]):
            print >> out,e,o,u
    else:
        print >> out,"# eps    occ(a)   unocc(a)   occ(b)   unocc(b)"
        for e,oa,ua,ob,ub in zip(eo[0],eo[1],eo[2],eo[3],eo[4]):
            print >> out,e,o,u,ob,ub

# forces
if opt.Forces:
    if paw.F_ac is None:
        print >> out, '# sorry, no forces'
    else:
        print >> out, '# Forces [' + energyunit + '/' + lengthunit + ']:'
        fmax = 0.
        scale = Ha/a0
        for s, f in zip(paw.get_atoms().get_chemical_symbols(), paw.F_ac):
            norm = sqrt(npy.dot(f, f)) * scale
            if norm > fmax:
                fmax = norm
            print >> out, s, norm, f * scale
        print >> out, '# max. force', fmax 
