#!/usr/bin/env python

# Emacs: treat this as -*- python -*-

from optparse import OptionParser

from gridpaw.atom.generator import Generator, parameters
from gridpaw.atom.all_electron import AllElectron


parser = OptionParser(usage='%prog [options] [elements]',
                      version='%prog 0.1')
parser.add_option('-f', '--xcfunctional', type='string', default='LDA',
                  help='Exchange-Correlation functional (default value LDA)',
                  metavar='<XC>')
parser.add_option('-n', '--non-scalar-relativistic', action='store_true',
                  default=False,
                  help='Do *not* do a scalar-relativistic calculation.')
parser.add_option('-x', '--exact-exchange', action='store_true',
                  default=False,
                  help='Calculate exact exchange integrals.')
parser.add_option('-r', '--radius', type='string', default=None,
                  help='Cutoff radii',
                  metavar='<rcut>')
parser.add_option('-v', '--potential', type='float', default=None,
                  help='Effective potential at r=0',
                  metavar='<v0>')
parser.add_option('-q', '--quick', action='store_true',
                  help='Skip generation logarithmic derivatives.')
parser.add_option('-a', '--all-electron-only', action='store_true',
                  help='Skip generation of PAW setup.')
parser.add_option('-e', '--extra', type='string', default=None,
                  help='Extra projectors.',
                  metavar='0.0;0.0,1.0;0.0')
parser.add_option('-c', '--core', type='string', default=None,
                  help='Frozen core.  Examples: "[Ne]", "[Ar]3d".',
                  metavar='<core>')
parser.add_option('-g', '--gamma', type='float', default=5.0,
                  help='Gamma value used for projector functions.')
parser.add_option('-s', '--scale-radius', type='float', default=2.0,
                  help='Value used to scale radius.')

opt, args = parser.parse_args()

if args:
    atoms = args
else:
    atoms = parameters.keys()

for symbol in atoms:
    scalarrel = not opt.non_scalar_relativistic

    if opt.all_electron_only:
        a = AllElectron(symbol, opt.xcfunctional, scalarrel)
        a.run()
        continue
    
    g = Generator(symbol, opt.xcfunctional, scalarrel)

    try:
        params = parameters[symbol]
    except KeyError:
        core = ''
        rcut = 1.0
        extra = None
    else:
        if len(params) == 2:
            core, rcut = parameters[symbol]
            extra = None
        else:
            core, rcut, extra = parameters[symbol]
    v0 = opt.potential
    if opt.core is not None:
        core = opt.core
    if opt.radius is not None:
        rcut = [float(x) for x in opt.radius.split(',')]
    if opt.extra is not None:
        extra = {}
        if opt.extra != '':
            for l, x in enumerate(opt.extra.split(';')):
                extra[l] = [float(y) for y in x.split(',')]
    g.run(core, rcut, extra, opt.gamma, opt.scale_radius,
          logderiv=not opt.quick, vt0=v0,
          exx=opt.exact_exchange)

